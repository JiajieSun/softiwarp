SoftiWARP: 'siw' Software iWARP kernel driver module.

SoftiWARP (siw) implements the iWARP protocol suite (MPA/DDP/RDMAP,
IETF-RFC 5044/5041/5040) completely in software as a Linux kernel module.
Targeted for integration with OpenFabrics (OFA) interfaces, it appears as
a kernel module in the drivers/infiniband/hw subdirectory of the Linux kernel.
SoftiWARP exports the OFA RDMA verbs interface, currently useable only
for user level applications. It makes use of the OFA connection manager
to set up connections. siw runs on top of TCP kernel sockets.


Status:
=======
siw is work in progress. It implements connection management, all iWARP
wire operations (SEND, READ, WRITE), and memory protection. For kernel
clients such as NVMe over Fabrics, additional application buffer management
functionality (local and remote STAG invalidation, 
fast memory registration) is provided.


Transmit Path:
==============
If a send queue (SQ) work queue element (wqe) gets posted, siw tries
first to send it directly out of the application context. If the SQ
was non-idle, SQ processing is done by a kernel worker thread.
If during send operation the socket send space get exhausted, SQ
processing is abandoned until it resumes via write space available
socket callback.

Packet Fragmentation:
---------------------
siw tries to take into account MTU size as reported by TCP. FPDU's are
constructed not to exceed the MTU to avoid fragmentation on the wire.
Since TCP is a byte stream protocol, no guarantee can be given if
FPDU's are not fragmented.
If interfacing real iWARP hardware, it might be needed to restrict
siw not to use GSO (Generic Segmentation Offload). Using GSO lets siw
send frames up to the size of the reported MTU (<=64KB), which may not
be acceptabe by RDMA hardware. A module parameter 'gso_seg_limit'
controls if GSO MTU size gets used by siw. A value of 1 allows siw
to format packets only up to MSS. A '0' formats as large frames as allowed
by GSO. Using GSO significantly improves siw throughput.

Zero Copy Send:
---------------
Where allowed by RDMA semantics, siw uses sendpage() for transmitting
user data. This avoids a local data copy operation. As long as the data
are not placed in peers target buffer, any changes to the content of
the local buffer to be sent will result in non predictable target buffer
content. Furthermore, if CRC checksumming is enabled, any change to non
transmitted data already under control of TCP will result in CRC 
corruption.  from kernel version 4.13 on, siw uses the now exported
function do_tcp_sendpages(), which significantly improves performance
for large, multi-page buffers.

Current experimental indicators for using sendpage():

CRC is disabled, AND
operation is a READ.response, OR
operation is a non signalled SEND, OR
operation is a non signalled WRITE.

Furthermore, sendpage() gets used only after a certain threshold of
payload data. All sendpage() usage is experimental and will be extended
to guarantee that the memory must stay resident until the data are
acknowledged by the peer.


Receive Path:
============-
All application data is directly received within the softirq socket callback
via tcp_read_sock(). This can be easily achieved, since all target
buffers are kernel resident.


Connection Management:
======================
IPv6 support is missing and will be added.


Memory Management:
==================
siw abandoned using OFA core user page management. It uses private functions
to pin and maintain memory for later use in data transfer operations.
Transmit and receive memory is checked
against correct access permissions only in the moment of access by the
network input path or before pushing it to the socket for transmission.


Performance:
============
Overall, performance was not yet our main focus. There is known headroom
for achieving higher performance.  Using GSO is essential for achieving
performance on par with plain TCP.

For user level operations, endpoint resources are memory mapped
to user space. This includes send queue, receive queue, and completion
queue. With that, the doorbell call during post_send() is the only
operation which requires the application to trap into the kernel
during fast path operations. All work queue element / completion queue
element handling is done within the user library.


Debugging:
==========
siw flexibly allows to set different levels of runtime debugging (see
siw_debug.h). Debug level setting is only compile-time. The debug code
must get revised to better make use of the available in-kernel device
debugging framework.


Incomplete List of Missing Functionality:
=========================================
MPA Marker insertion
MPA Marker reception (not very useful)
IPv6 support



Comments:
=========
Please send comments to Bernard Metzler,
bmt@zurich.ibm.com.
